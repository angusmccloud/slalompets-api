service: tparty2022

frameworkVersion: ">=1.1.0 <2.0.0"

plugins:
  - serverless-plugin-warmup
  - serverless-dotenv-plugin

provider:
  name: aws
  runtime: nodejs14.x
  stage: ${env:stage, 'dev'}
  region: us-east-1
  environment:
    CONTENT_TABLE: ${self:service}-${opt:stage, self:provider.stage}-content
    USER_POOL_ID: ${env:userPoolId}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:DeleteItem
        - dynamodb:UpdateItem
        - dynamodb:GetItem
        - dynamodb:PutItem
        - cognito-idp:ListUsers
        - lambda:InvokeFunction
        - "sqs:SendMessage"
        - "sqs:GetQueueUrl"
        # Will need more here for S3 permissions
      Resource: "*"

functions:
  testerFunction:
    handler: app/private/tester.tester
    description: Used for testing functions
  contentCreate:
    warmup: ${env:preWarm, false}
    prewarm: ${env:preWarm, false}
    handler: app/public/content.submit
    description: Create a new piece of Content
    events:
      - http:
          path: content/submit
          method: post
          cors:
              origin: '*'
              headers:
                - Content-Type
                - X-Amz-Date
                - Authorization
                - X-Api-Key
                - X-Amz-Security-Token
              allowCredentials: true
  contentGet:
    warmup: ${env:preWarm, false}
    prewarm: ${env:preWarm, false}
    handler: app/public/content.get
    description: Get a single piece of Content, by contentId
    events:
      - http:
          path: content/get/{contentId}
          method: get
          cors:
              origin: '*'
              headers:
                - Content-Type
                - X-Amz-Date
                - Authorization
                - X-Api-Key
                - X-Amz-Security-Token
              allowCredentials: true
  contentList:
    warmup: ${env:preWarm}
    prewarm: ${env:preWarm}
    handler: app/public/content.list
    description: Get list of all content
    events:
      - http:
          path: content/list
          method: get
          cors:
              origin: '*'
              headers:
                - Content-Type
                - X-Amz-Date
                - Authorization
                - X-Api-Key
                - X-Amz-Security-Token
              allowCredentials: true
  contentDelete:
    warmup: ${env:preWarm, false}
    prewarm: ${env:preWarm, false}
    handler: app/public/content.delete
    description: Delete a Content item
    events:
      - http:
          path: image/delete/{contentId}
          method: delete
          cors:
              origin: '*'
              headers:
                - Content-Type
                - X-Amz-Date
                - Authorization
                - X-Api-Key
                - X-Amz-Security-Token
              allowCredentials: true

resources:
  Resources:
    ContentDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: "contentId"
            AttributeType: "S"
        KeySchema:
          -
            AttributeName: "contentId"
            KeyType: "HASH"
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: "NEW_AND_OLD_IMAGES"
        TableName: ${self:provider.environment.CONTENT_TABLE}